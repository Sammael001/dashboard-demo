
	HOW TO HOST a dynamic website with a database

...............................................................................................................................................................


	MONGODB ATLAS:

(+) login to mongoDB Atlas

	Create Cluster (if you don't already have one)

	Create User:
(+) left hand menu options, click Database Access (under Security)
(+) create new user with User Privileges: Atlas Admin
(+) copy down username + password

	Whitelist IPs:
(+) under Security > Network Access > IP Whitelist, ensure all IPs are whitelisted (if IP address 0.0.0.0/0 listed, all are permitted)

	Connect with Mongo Shell (optional, for testing) :
(+) go to Clusters and hit Connect
(+) Connect with Mongo Shell (I have Mongo Shell installed)
(+) select Mongo Shell version (currently 4.2.2)
(+) copy connection string given, and add password to the end. Should look like this:
	mongo "mongodb+srv://cluster0-cfetv.mongodb.net/test" --username <username> --password <password>
	(replace <username> and <password> with whatever username + password you created)


	Create New DB:
(+) under Cluster, click Collections, then [+ Create Database]
(+) the GUI in MongoDB Atlas will allow you to create Collections and insert Documents for testing


	Connect Your App:
(+) go to Clusters and hit Connect (OR, go to Overview, and Connect in right-hand corner)
(+) click Connect Your Application
(+) Copy connection string:
	mongodb+srv://<username>:<password>@cluster0-cfetv.mongodb.net/<test>
	(replace <username> and <password> with whatever username + password you created)
	(replace <test>, which comes after .net, with the name of the database you want to connect to)


(+) go to your app.js and replace the following connection string as shown:
mongoose.connect("mongodb+srv://<username>:<password>@cluster0-cfetv.mongodb.net/<test>", {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

(+) Now your database is live :)
(+) It may be necessary to manually add the data into the Atlas database if it only existed in the local DB




...............................................................................................................................................................



	HEROKU:

https://devcenter.heroku.com/articles/deploying-nodejs
https://devcenter.heroku.com/articles/preparing-a-codebase-for-heroku-deployment

* refer to this guide to provide your app with its env variables on Heroku: https://devcenter.heroku.com/articles/config-vars#using-the-heroku-dashboard

REMEMBER: Just login to heroku CLI once. You can run "heroku create" from the regular bash terminal prompt after running "heroku login" at least once.

(1) initialize git repository
(2) MAKE SURE to add node_modules to .gitignore!
(3) push to github

(4) add the following to package.json:
    "engines": {
      "node": "10.x" // your version of node goes here
    }
	(make sure you have a start script in your package.json file!)
		"scripts": {
	    "start": "node app.js"
	  },

(5) make sure your core server app is named app.js

(+) be sure your PORT in app.js is setup as shown:

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

(6) create "Procfile" (NOT procfile or procfile.txt, just Procfile) in home directory of app and add this:
  web: node app.js

(7)
RUN: heroku login
(exit back to git command prompt?)
RUN: heroku create

(this generates a Heroku repo for you. EX: https://git.heroku.com/boiling-fortress-82929.git)

RUN: git push heroku master

(+) And you are done! After pushing, you will be given the URL of your site:  https://boiling-fortress-82929.herokuapp.com/ |


After updates to the app, to re-deploy changes to heroku:

RUN: git add .
RUN: git commit -m "commit for deploy to heroku"
RUN: git push
RUN: git push -f heroku
